<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      autoReload="true"
      internalLogLevel="Warn"
      internalLogFile="${configsetting:item=LoggingPath}\internal-caei.txt">

	<!-- Load the ASP.NET Core plugin -->
	<extensions>
		<add assembly="NLog.Web.AspNetCore"/>
	</extensions>

	<variable name="appName" value="CAEI" />
	<variable name="logDirectory" value="${configsetting:item=LoggingPath}\${appName}" />

	<!-- the targets to write to -->
	<targets>

		<default-wrapper xsi:type="AsyncWrapper" timeToSleepBetweenBatches="0" overflowAction="Block" />

		<target xsi:type="File" name="warningErrorFile" fileName="${logDirectory}\caeilog-${shortdate}.log"
							header="Date Time|Env|App|Level|Username|Request IP|Request Method|URL|QueryString|UserAgent|traceidentifier ¦ logger|Message ¦ exception"
							layout="${longdate}|${aspnet-environment}|${appName}|${uppercase:${level}}|${aspnet-User-Identity}|${aspnet-Request-IP}|${aspnet-Request-Method}|${aspnet-Request-Url}|${aspnet-Request-QueryString}|${aspnet-Request-UserAgent}|${aspnet-traceidentifier}${newline}${logger}|${message}${newline}${exception:format=tostring,Data:maxInnerExceptionLevel=10}" />

		<target xsi:type="File" name="debugFile" fileName="${logDirectory}\caeilog-debug-${shortdate}.log"
							 header="Date Time|Env|App|Level|Username|Request IP|Request Method|URL|QueryString|UserAgent|traceidentifier ¦ logger|Message ¦ exception"
							 layout="${longdate}|${aspnet-environment}|${appName}|${uppercase:${level}}|${aspnet-User-Identity}|${aspnet-Request-IP}|${aspnet-Request-Method}|${aspnet-Request-Url}|${aspnet-Request-QueryString}|${aspnet-Request-UserAgent}|${aspnet-traceidentifier}${newline}${logger}|${message}${newline}${exception:format=tostring,Data:maxInnerExceptionLevel=10}" />

		<target xsi:type="ColoredConsole" name="warningErrorConsole" layout="${MicrosoftConsoleLayout}" >
			<highlight-row condition="level == LogLevel.Debug" foregroundColor="DarkGray" />
			<highlight-row condition="level == LogLevel.Info" foregroundColor="Green" />
			<highlight-row condition="level == LogLevel.Warn" foregroundColor="Yellow" />
			<highlight-row condition="level == LogLevel.Error" foregroundColor="Red" />
			<highlight-row condition="level == LogLevel.Fatal" foregroundColor="Red" backgroundColor="White" />
		</target>
		
		<!--Console Target for hosting lifetime messages to improve Docker / Visual Studio startup detection -->
		<target xsi:type="Console" name="lifetimeConsole" layout="${MicrosoftConsoleLayout}" />

		<!-- Uncomment to log all requests in Test and Prod -->
		<!--<target xsi:type="File" name="activityfile" fileName="${logDirectory}\nlog-${shortdate}.log"
						header="Date Time|Level|Username|Request IP|Request Method|URL|QueryString|UserAgent|Referrer|Message"
						layout="${longdate}|${uppercase:${level}}|${aspnet-User-Identity}|${aspnet-Request-IP}|${aspnet-Request-Method}|${aspnet-Request-Url}|${aspnet-Request-QueryString}|${aspnet-Request-UserAgent}|${aspnet-Request-Referrer}|${message}" />-->

	</targets>

	<!-- rules to map from logger name to target -->
	<rules>

		<!--Log to warning and error file only in Prod and Test-->
		<logger name="*" minlevel="${configsetting:item=Logging.LogLevel.Default}" writeTo="warningErrorFile">
			<filters defaultAction='Log'>
				<when condition="contains('${aspnet-environment}','Development')" action="Ignore" />
			</filters>
		</logger>

		<!--Log to debug file in dev and test-->
		<logger name="TestLog" minlevel="Debug" writeTo="debugFile">
			<filters defaultAction='Log'>
				<when condition="contains('${aspnet-environment}','Production')" action="Ignore" />
			</filters>
		</logger>

		<!--Log to console for debugging locally-->
		<logger name="*" minlevel="${configsetting:item=Logging.LogLevel.Default}" writeTo="warningErrorConsole">
			<filters defaultAction='Log'>
				<when condition="starts-with(logger, 'Microsoft')" action="Ignore" />
				<when condition="contains('${aspnet-environment}','Test')" action="Ignore" />
				<when condition="contains('${aspnet-environment}','Production')" action="Ignore" />
			</filters>
		</logger>


		<!-- Uncomment to log all requests in Test and Prod -->
		<!--<logger name="Microsoft.AspNetCore.Hosting.Diagnostics" level="Info" writeTo="activityfile">
      <filters defaultAction='Log'>
        -->
		<!-- Don't do request logging on the developers systems -->
		<!--
        <when condition="'${aspnet-environment}' == 'Development'" action="Ignore" />
        -->
		<!-- Log MVC action requests -->
		<!--
        <when condition="length('${aspnet-mvc-action}') > 0" action="Log" />
        -->
		<!-- Ignore all other microsoft logging -->
		<!--
        <when condition="starts-with(logger, 'Microsoft')" action="Ignore" />
      </filters>
    </logger>-->

		<!--Output hosting lifetime messages to console target for faster startup detection -->
		<logger name="Microsoft.Hosting.Lifetime" minlevel="Info" writeTo="lifetimeConsole" final="true" />

		<!--Skip non-critical Microsoft logs -->
		<logger name="Microsoft.*" maxlevel="Info" final="true" />
		<logger name="System.Net.Http.*" maxlevel="Info" final="true" />
	</rules>
</nlog>